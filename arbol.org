#+title: Árbol generador de menor costo

#+options: toc:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstalias{ipython}{python}
#+latex_header: \lstset{basicstyle=\small\ttfamily, frame=single}

#+latex_header: \usepackage{bera}

#+property: header-args:ipython :exports both :cache yes :session arbol :results raw drawer

* Problema

Supongamos que a cada arista de la grafica completa \K_{n}\ se le asigna un valor ("peso").
Si a cada subgráfica le asignamos un peso igual a la suma de los pesos de sus aristas, consideraremos 
el problema de encontrar el árbol generador de menor peso.

* Algoritmo de Kruskal 

El algoritmo de Kruskal consiste en escoger sucesivamente las aristas más baratas con tal deqno formen
 ciclos con las aristas escogidas previamente.En una gráifca con \(n\) vértices se puede demostrar que
tal algoritmo termina cando hayamos escogido \(n-1\) arrtas, y que el árbol así construido es tal que
tiene costo mínimo.

* Implementación

Primeramente vamos a importar las bibliotecas que vamos a utilizar 

#+begin_src ipython 
import networkx as nx
import matplotlib.pyplot as plt
from random import random as random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[2a253d47c089a054eb3655b60d8ccea8fad581c9]:
:results:
# Out[2]:
:end:

A continuación definiremos una gráfica aleatoria con 10 vértices

#+begin_src ipython
g=nx.gnp_random_graph(10, 0.2)
#+end_src

#+RESULTS[686d2b8b58905b6e9c928e84fd5489c436bec335]:
:results:
# Out[3]:
:end:

Veremos si nuestra gráfica es un bosque.

#+begin_src ipython
nx.is_forest(g), nx.is_connected(g)
#+end_src

#+RESULTS[e7d1dbb3a296c52111081a2873e11b0c5e1bcb99]:
:results:
# Out[4]:
: (True, False)
:end:

A continuación dibujaremos esta gráfica.

#+begin_src ipython
nx.draw(g, with_labels=True)
#+end_src

#+RESULTS[7a5a44e71604efbb3ac02fd3863ef7628a5be23d]:
:results:
# Out[5]:
[[file:./obipy-resources/2629GNB.png]]
:end:

Calcularemos las componentes conexas de esta gráfica:

#+begin_src ipython
list(nx.connected_components(g))
#+end_src

#+RESULTS[fd43bac86ab4e6adb6ece858cb2c922a37acadb0]:
:results:
# Out[6]:
: [{0}, {1, 5, 7}, {2}, {3, 4, 9}, {6}, {8}]
:end:

Veamos la componente que contiene al vértice 1.

#+begin_src ipython
nx.node_connected_component(g, 1)
#+end_src

#+RESULTS[be13b73df32134c77fb39c83a78ad0ad6a903054]:
:results:
# Out[7]:
: {1, 5, 7}
:end:

A continuación dibujaremos un árbol escogido aleatoriamente.

#+begin_src ipython
t=nx.random_tree(10)
nx.draw(t, with_labels=True)
#+end_src

#+RESULTS[40cadd15ea973ae0dd4c6e9ce48469aa6584d9b0]:
:results:
# Out[8]:
[[file:./obipy-resources/2629TXH.png]]
:end:

* Puntos en el plano

Si tenemos dos listas de números de tamaño =n=, podemos dibujar =n= puntos en el plano,
tomando las coordenadas =x= de la primera lista y las coordenadas =y= de la segunda.

#+begin_src ipython
plt.plot([1,1,2],[1,2,3],'bx')
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS[a2473dc10d4388557d58b145c3b398832095523d]:
:results:
# Out[10]:
[[file:./obipy-resources/2629trT.png]]
:end:

Vamos a definir una función que dibuje =n= puntos en el plano aleatoriamente.

#+begin_src ipython
def puntos_en_el_plano(n):
    listax=[]
    listay=[]
    for i in range(n):
        listax.append(random())
        listay.append(random())
    return listax, listay
#+end_src

#+RESULTS[1cddae6365e0c7df4eef77ad1b5bc8bbf58f96c2]:
:results:
# Out[11]:
:end:

#+begin_src ipython
puntos=puntos_en_el_plano(50)
puntos
#+end_src

#+RESULTS[2de7274bacd85fdac8ce475bf9077286f1f6673a]:
:results:
# Out[20]:
#+BEGIN_EXAMPLE
  ([0.8302879447150826,
  0.060727348191005004,
  0.6906513156041568,
  0.205371949457561,
  0.7831683737299205,
  0.11056422638297958,
  0.011742838736407357,
  0.2961303335734278,
  0.9727979030439259,
  0.5342160128852395,
  0.8481771790742977,
  0.9075572172972087,
  0.5467423958136418,
  0.23578110744199188,
  0.18593011249793323,
  0.41855375976524967,
  0.9032266199908623,
  0.018155445508916235,
  0.1900882959199388,
  0.4271098107250144,
  0.0441816039940196,
  0.5650896364672094,
  0.7800716459908729,
  0.9798234147670897,
  0.5227652041571663,
  0.9852276898842272,
  0.6225250129448031,
  0.6915918087297167,
  0.3105474106963554,
  0.07496578660665076,
  0.27026780525027705,
  0.3732771713342917,
  0.6238570434421412,
  0.5022188085914864,
  0.6927644712586223,
  0.22264210562926645,
  0.6204026084176083,
  0.18199591168750529,
  0.8582757740454406,
  0.5480229017909851,
  0.7016816247948683,
  0.3167595544593431,
  0.3577678595542987,
  0.7394209582847532,
  0.7154456428943944,
  0.7280593044618068,
  0.913929759892807,
  0.857198179271667,
  0.43134465773742314,
  0.7044908779322562],
  [0.03670073151428477,
  0.3880389694745746,
  0.2789738971974399,
  0.24999642162592683,
  0.11799134766518249,
  0.26421242153933266,
  0.7438099494720366,
  0.44942417170652715,
  0.9716963122016856,
  0.5007013336667295,
  0.06340108126682253,
  0.2931651401749381,
  0.9400392356636001,
  0.32673418954545697,
  0.060913772849650716,
  0.057563416622535835,
  0.21113224027263788,
  0.4380323790797218,
  0.24728982278016542,
  0.926669324499162,
  0.3814822958763061,
  0.4412988779588284,
  0.7243734682617066,
  0.4256542615755212,
  0.5817782478620134,
  0.8208066449406247,
  0.6351341340807121,
  0.03164012869633226,
  0.5552027950043776,
  0.4985397196170428,
  0.5346188623691606,
  0.30815951744200376,
  0.12026006444209925,
  0.7535770275801843,
  0.7378331279903371,
  0.5648955655218291,
  0.21620468592821473,
  0.6692482382452427,
  0.6654646234080331,
  0.6510912148159506,
  0.583358076686746,
  0.1939957490774904,
  0.2197351622628343,
  0.9974848898831448,
  0.4787843063398258,
  0.5750518355311282,
  0.622212506124421,
  0.4878799952525623,
  0.5777759205453967,
  0.20952399368695773])
#+END_EXAMPLE
:end:

#+begin_src ipython
plt.plot(*puntos, 'ro')
plt.show()
#+end_src

#+RESULTS[3e875b45815176da72d413ae26cf591eba8c559f]:
:results:
# Out[18]:
[[file:./obipy-resources/2629HAg.png]]
:end:

Hagamos una función tal que, a partir de dos listas, produzca el dibujo:

#+begin_src ipython
def dibujo_puntos(listax, listay):
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1,1.1,-0.1,1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[b62c33bac294c25d54476a3d29ed7d0fda02559e]:
:results:
# Out[19]:
:end:

#+begin_src ipython
dibujo_puntos(*puntos)
#+end_src

#+RESULTS[274d1e4a2e4c1e9a72c9f464a39ff8637dd52977]:
:results:
# Out[21]:
[[file:./obipy-resources/2629UKm.png]]
:end:



# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
